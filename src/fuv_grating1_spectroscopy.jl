
using FITSIO, Measurements,  DelimitedFiles, SmoothingSplines, Dates

"""
   `fuv_grating1_count_spec(fuv_grating1_image_file, ds9regfile[, order = -1, cross_disp_width_pixels = 50, rate = true])` 

Extract count rate spectrum from AstroSat/UVIT FUV-Grating1 dispersed image generated from CCDLAB processing pipeline.

...
# Arguments
## Required parameters
- `fuv_grating1_image_file::String`: Name of the FUV-Grating1 image file in FITS format generated using CCDLAB.
- `ds9regfile::String`: Name of the ds9 region file with center as the zero order position.
## Optional parameters
- `order::Int`: -2 (default), Grating order to be used to extract the spectrum. 
                 Allowed orders=-1 and -2.
- `cross_disp_width_pixels::String`: 50 (default), width in pixels in the cross-dispersion direction.
- `rate::Bool`: true (default) for count rate spectrum, otherwise false for count spectrum.
- `outfile::String`: Name of ascii output file name. Default file name: "`fuv_grating1_count_spec.dat`".

...
"""
function fuv_grating1_count_spec(fuv_grating1_image_file::String, ds9regfile::String; order::Int = -2, cross_disp_width_pixels::Int = 50, angle_xaxis_disp_deg::Float64=0.0, rate::Bool = true)
#Open grating image file generated by CCDLAB
   	fb = FITS(fuv_grating1_image_file)
   	gimg = read(fb[1])
   	exposure_time_sec = float(read_key(fb[1], "RDCDTIME")[1])
   	uvit_detector = read_key(fb[1], "DETECTOR")[1]
   	uvit_grating = read_key(fb[1], "FILTERID")[1]
   	naxis1 = read_key(fb[1], "NAXIS1")[1]

# Extract 1d spectrum

#Extract source x/y center from ds9 region file
   	(cenx, ceny) = xycen_from_ds9reg(ds9regfile)

# Determine the trace and cross-dispersion range for spectral extraction

# Trace is linear line : y =mx+c with m=tand(267.531) for FUV grating1
#The slope and intercept are

    m = tand(angle_xaxis_disp_deg)
    c = ceny - m * cenx

# Need to find x-coordinate along the trace i.e., for each y.
# Number of rows i.e., number of y values is naxis2.

    xvals = collect(1:naxis1)
    yvals = round.(Int, (m * xvals .+ c))
#println(xvals)

   	ylo = round.(Int, yvals .- cross_disp_width_pixels / 2)
	#println(xlo)
   	yhi = round.(Int, yvals .+ cross_disp_width_pixels / 2)
	#println(xhi)

	# Sum the counts from xlo to xhi for each xvalue

   	grating_spec = sum.([gimg[i, ylo[i]:yhi[i]] for i in 1:naxis1])


	#display(plot(src_spec))

	#pixel_numbers = linearindices(src_spec)
 	#pixel_numbers = range(1,1,length(grating_spec))
   	pixel_numbers = collect(1:length(grating_spec))
   	pixel_num_wrt_zero_order =  pixel_numbers .- round(Int, cenx)



# Select the range of pixel numbers wrt zero order appropriate for -2 or -1 order
    if order == -2
		#1280 to 1800A corresponds to -630 to -442 in order=-2
       	pixels_m2_order = pixel_num_wrt_zero_order[(pixel_num_wrt_zero_order .> -630) .& (pixel_num_wrt_zero_order .< -412)]
       	grating_spec_m2_order = grating_spec[(pixel_num_wrt_zero_order .> -630) .& (pixel_num_wrt_zero_order .< -412)]
       	grating_spec_m2_order_counts = measurement.(grating_spec_m2_order, sqrt.(grating_spec_m2_order))
       	grating_spec_m2_order_counts_per_s =  grating_spec_m2_order_counts / exposure_time_sec
	# generate extraction region that can be displayed in ds9
		xcen_m2 = (-629 - 413)/2 + cenx
		ycen_m2 = m * xcen_m2 +  c
		xsize_m2 = -413 + 629 + 1
		ysize_m2 = cross_disp_width_pixels
		println([xcen_m2, ycen_m2, xsize_m2, ysize_m2])
		reg = """# Region file format: DS9 version 4.1
		global color=green dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
		physical
		box($xcen_m2,$ycen_m2,$xsize_m2,$ysize_m2,$angle_xaxis_disp_deg)
		"""
	# 	Construct and write region filename from input zero order region file
		outregfile = split(ds9regfile, ".")[1] * "_fuv_grating1_m2" * ".reg"
		open(outregfile, "w") do file
			write(file, reg)
		end
	#	Construct and write output 1d count spectrum file
		outspecfile = split(ds9regfile, ".")[1] * "_fuv_grating1_m2_count_spec" * ".dat"
        if rate == true
		#display(plot(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts_per_s), yerr=Measurements.uncertainty.(grating_spec_m2_order_counts_per_s),xlabel="Pixel numbers wrt zero order", ylabel="counts/s"))
          		writedlm(outspecfile, zip(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts_per_s), Measurements.uncertainty.(grating_spec_m2_order_counts_per_s)))
          		return pixels_m2_order, grating_spec_m2_order_counts_per_s
       	else
		#display(plot(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts), yerr=Measurements.uncertainty.(grating_spec_m2_order_counts), xlabel="Pixel numbers wrt zero order", ylabel="counts"))
          		writedlm(outspecfile, zip(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts), Measurements.uncertainty.(grating_spec_m2_order_counts)))
          		return pixels_m2_order, grating_spec_m2_order_counts
       	end
		
		

    elseif order == -1
	
		#= Original code
       	pixels_m1_order = pixel_num_wrt_zero_order[(pixel_num_wrt_zero_order .> -322) .& (pixel_num_wrt_zero_order .< -212)]
       	grating_spec_m1_order = grating_spec[(pixel_num_wrt_zero_order .> -322) .& (pixel_num_wrt_zero_order .< -212)]
		=# 

		# Modified to extract wider wavelength coverage to check red leak
		pixels_m1_order = pixel_num_wrt_zero_order[(pixel_num_wrt_zero_order .> -401) .& (pixel_num_wrt_zero_order .< -212)]
       	grating_spec_m1_order = grating_spec[(pixel_num_wrt_zero_order .> -401) .& (pixel_num_wrt_zero_order .< -212)]
       	grating_spec_m1_order_counts = measurement.(grating_spec_m1_order, sqrt.(grating_spec_m1_order))
       	grating_spec_m1_order_counts_per_s =  grating_spec_m1_order_counts / exposure_time_sec
        # generate extraction region that can be displayed in ds9
		xcen_m1 = (-400 - 213)/2 + cenx
		ycen_m1 = m * xcen_m1 +  c
		xsize_m1 = -213 + 400 + 1
		ysize_m1 = cross_disp_width_pixels
		reg_m1 = """# Region file format: DS9 version 4.1
		global color=green dashlist=8 3 width=1 font="helvetica 10 normal roman" select=1 highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1
		physical
		box($xcen_m1,$ycen_m1,$xsize_m1,$ysize_m1,$angle_xaxis_disp_deg)
		"""
		# Construct output DS9 region file 
		outregfile = split(ds9regfile, ".")[1] * "_fuv_grating1_m1" * ".reg"
		open(outregfile, "w") do file
			write(file, reg_m1)
		end
		outspecfile = split(ds9regfile, ".")[1] * "_fuv_grating1_m1_count_spec" * "_cross_disp_with_" * string(cross_disp_width_pixels) * "pixels_" * string(angle_xaxis_disp_deg) * "deg.dat"
		if rate == true
		#display(plot(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts_per_s), yerr=Measurements.uncertainty.(grating_spec_m2_order_counts_per_s),xlabel="Pixel numbers wrt zero order", ylabel="counts/s"))
          	writedlm(outspecfile, zip(pixels_m1_order, Measurements.value.(grating_spec_m1_order_counts_per_s), Measurements.uncertainty.(grating_spec_m1_order_counts_per_s)))
          	return pixels_m1_order, grating_spec_m1_order_counts_per_s
       	else
		#display(plot(pixels_m2_order, Measurements.value.(grating_spec_m2_order_counts), yerr=Measurements.uncertainty.(grating_spec_m2_order_counts), xlabel="Pixel numbers wrt zero order", ylabel="counts"))
          		writedlm(outspecfile, zip(pixels_m1_order, Measurements.value.(grating_spec_m1_order_counts), Measurements.uncertainty.(grating_spec_m1_order_counts)))
          		return pixels_m1_order, grating_spec_m1_order_counts
       	end
		
  		else
   				 println("Grating order $order not calibrated")
			 end
end

# Function to calculate net count rate for grating order -2 or -1


"""

   `fuv_grating1_net_countrate_spec(fuv_grating1_image_file, ds9srcregfile, ds9bgdregfile[, order = -2, cross_disp_width_pixels = 50,  outfile="fuv_grating1_net_countrate_spec.dat"])` 

Extract background corrected, net count rate spectrum from AstroSat/UVIT FUV-Grating1 dispersed image generated from CCDLAB processing pipeline.

...
# Arguments
## Required parameters
- `fuv_grating1_image_file::String`: Name of the FUV-Grating1 image file in FITS format generated using CCDLAB.
- `ds9srcregfile::String`: Name of the ds9 region file with source center as the zero order position.
- `ds9bgdregfile::String`: Name of the ds9 region file with  center in a source-free region of the image.
## Optional parameters
- `order::Int`: -2 (default), Grating order to be used to extract the spectrum. 
                 Allowed orders=-1 and -2.
- `cross_disp_width_pixels::String`: 50 (default), width in pixels in the cross-dispersion direction.
- `outfile::String`: Name of ascii output file name. Default file name: "`fuv_grating1_net_countrate_spec.dat`".
...
"""
function fuv_grating1_net_countrate_spec(fuv_grating1_image_file::String, ds9srcregfile::String, ds9bgdregfile::String; order::Int = -2, cross_disp_width_pixels::Int = 50, angle_xaxis_disp_deg::Float64=0.0)
   	if order == -2 || order == -1
     	(pixels, src_spec_counts_per_s) = fuv_grating1_count_spec(fuv_grating1_image_file, ds9srcregfile,  order = order, cross_disp_width_pixels = cross_disp_width_pixels, angle_xaxis_disp_deg=angle_xaxis_disp_deg, rate = true)
       	(pixels, bgd_spec_counts_per_s) = fuv_grating1_count_spec(fuv_grating1_image_file,  ds9bgdregfile, order = order, cross_disp_width_pixels = cross_disp_width_pixels, angle_xaxis_disp_deg=angle_xaxis_disp_deg, rate = true)
		netsrc_spec_counts_per_s = (src_spec_counts_per_s .- bgd_spec_counts_per_s)
		if order == -2
			outfile = "net_fuv_grating1_" * "m2" * "_countrate_spec" * "_cross_disp_with_" * string(cross_disp_width_pixels) * "pixels_" * string(angle_xaxis_disp_deg) * "deg.dat"
		else
			outfile = "net_fuv_grating1_" * "m1" * "_countrate_spec" * "_cross_disp_with_" * string(cross_disp_width_pixels) * "pixels_" * string(angle_xaxis_disp_deg) * "deg.dat"
		end
	 	writedlm(outfile, zip(pixels, Measurements.value.(netsrc_spec_counts_per_s), Measurements.uncertainty.(netsrc_spec_counts_per_s)))
 	 else
     	println("Grating order $order not calibrated")
 	 end
 		 return pixels, netsrc_spec_counts_per_s
end

"""

   `fuv_grating1_net_countrate(fuv_grating1_image_file, ds9srcregfile, ds9bgdregfile[, order = -2, cross_disp_width_pixels = 50])` 

Calculate background corrected, net count rate from AstroSat/UVIT FUV-Grating1 dispersed image generated from CCDLAB processing pipeline.

...
# Arguments
## Required parameters
- `fuv_grating1_image_file::String`: Name of the FUV-Grating1 image file in FITS format generated using CCDLAB.
- `ds9srcregfile::String`: Name of the ds9 region file with source center as the zero order position.
- `ds9bgdregfile::String`: Name of the ds9 region file with  center in a source-free region of the image.
## Optional parameters
- `order::Int`: -2 (default), Grating order to be used to extract the spectrum. 
                 Allowed orders=-1 and -2.
- `cross_disp_width_pixels::String`: 50 (default), width in pixels in the cross-dispersion direction.
- `mst_or_bjd::String`: Print mission time (mst) or barycentric julain data (bjd). Default: "mst".
...
"""
function fuv_grating1_net_countrate(fuv_grating1_image_file::String, ds9srcregfile::String, ds9bgdregfile::String; order::Int = -2, cross_disp_width_pixels::Int = 50, mst_or_bjd="mst")
		fb = FITS(fuv_grating1_image_file)
	#	gimg = read(fb[1])
		exposure_time_sec = float(read_key(fb[1],"RDCDTIME")[1])
		uvit_detector = read_key(fb[1],"DETECTOR")[1]
		uvit_grating = read_key(fb[1],"FILTERID")[1]
		if mst_or_bjd=="mst"
			tstart = read_key(fb[1],"TSTART")[1]
			tstop = read_key(fb[1],"TSTOP")[1]
			meanmst=(tstart + tstop) / 2.0
		elseif mst_or_bjd=="bjd"
			meanbjd=read_key(fb[1],"MEANBJD")[1]
		else
			println("The value of keyword mst_or_bjd is not one of mst or bjd.")
		end
		close(fb)

	if order == -2 || order == -1
		(pixels, src_spec_counts) = fuv_grating1_count_spec(fuv_grating1_image_file, ds9srcregfile,  order = order, cross_disp_width_pixels = cross_disp_width_pixels, rate = false)
		(pixels, bgd_spec_counts) = fuv_grating1_count_spec(fuv_grating1_image_file,  ds9bgdregfile, order = order, cross_disp_width_pixels = cross_disp_width_pixels, rate = false)
		total_src_counts = sum(src_spec_counts) 
		total_bgd_counts = sum(bgd_spec_counts)
		netsrc_count_rate = (total_src_counts - total_bgd_counts)/exposure_time_sec
	
	# Print result	
		println("")
		println("=====Calculating net count rate=====")
		println("UVIT Channel: $uvit_detector")
		println("Grating: $uvit_grating")
		println("Grating order= $order")
		println("Net source count rate= $netsrc_count_rate")
		if mst_or_bjd=="mst"
			println("Mission time: $meanmst")
			println("===================================")
			return meanmst, netsrc_count_rate
		else mst_or_bjd=="bjd"
			println("BJD= $meanbjd")
			println("===================================")
			return meanbjd, netsrc_count_rate
		end
		
	else
		println("Grating order $order not calibrated")
		return 0.0
 	 end
end


"""
   `fuv_grating1_pixel2lamA(pixel_num_wrt_zero_order[, order = -2])`

Convert pixel number relative to zero to wavelength in Angstrom.

This function is used for wavelength calibration of FUV-Grating1 count spectrum.
	
## Required parameters
- `pixel_num_wrt_zero_order::Int`: Pixel numbers relative to zero order.
## Optional parameters
- `order::Int`: -2 (default), Grating order. Allowed orders=-1 and -2.
...
"""
function fuv_grating1_pixel2lamA(pixel_num_wrt_zero_order;order=-2)
	pixels = pixel_num_wrt_zero_order
	if order == -2
	 
	 # Quadratic fit
	 #=
	 	(c0,c1, c2)=(-86.37260596120976, -3.2915660227689907, -0.00047561073304810747)
	 	fuv_lambdaA = c0 + c1* pixels + c2 * pixels^2
	=#

	# Linear fit
	 (c0,c1) = (45.52709688716913,-2.789558814560311)
	 fuv_lambdaA = c0 + c1* pixels
		return fuv_lambdaA
	elseif order == -1
		(c0,c1)=(-18.0335, -5.8332)
	 	fuv_lambdaA = c0 + c1* pixels
	#	netsrc_spec_counts_per_s_A = netsrc_spec_counts_per_s ./ 5.6046
		return fuv_lambdaA
	else
		println("Grating order=$order is not calibrated, wavelength calibration not available.")
		return -1
	end
end



"""
    lamA2lohi(lamA)
Generate wavelength bins (A_lo, A_hi) and energy bins (E_lo, E_hi) from an array of wavelengths in Å.

...
# Arguments
- `lamA::Array{Float64}`: An array of wavelengths in Å.

...
"""
function lamA2lohi(lamA::Array{Float64,1})
    sort!(lamA)
    nbins = length(lamA)
    lamA_lo = Array{Float64}(undef,nbins)
    lamA_hi = Array{Float64}(undef,nbins)


    for i=1:nbins
        if i==1
            lamA_lo[i] = lamA[i] - (lamA[i+1] - lamA[i])/2.0
            lamA_hi[i] = lamA[i] + (lamA[i+1] - lamA[i])/2.0
        elseif i < nbins
            lamA_hi[i] = lamA[i] + (lamA[i+1] - lamA[i])/2.0
            lamA_lo[i] = lamA_hi[i-1]
        else
            lamA_lo[i] = lamA_hi[i-1]
            lamA_hi[i] = lamA[i] + (lamA[i] - lamA[i-1])/2.0
    end

        println(lamA_lo[i])
       println(lamA_hi[i])
    end
    enkev_lo = reverse(lambdaA2keV.(lamA_hi))
    enkev_hi = reverse(lambdaA2keV.(lamA_lo))
    return lamA_lo, lamA_hi, enkev_lo, enkev_hi
end



"""
   `fuv_grating1_wavelength_calib(pixels, netsrc_spec_counts_per_s[, order = -2])`

Convert pixel numbers relative to zero to wavelengths.

This function is used for wavelength calibration of FUV-Grating1 count spectrum.

...
# Arguments
## Required parameters
- `pixels::Array`: An array of pixel numbers relative to zero order.
- `netsrc_spec_counts_per_s::Array`: An array of net count rates corresponding to the relative pixel numbers.
## Optional parameters
- `order::Int`: -2 (default), Grating order. Allowed orders=-1 and -2.
...
"""
function fuv_grating1_wavelength_calib(pixels, netsrc_spec_counts_per_s; order = -2)
#Wavelength calibration analysis of NGC40 data in 1/8pixel resoultion
	fuv_lambdaA = fuv_grating1_pixel2lamA.(pixels,order=order)
    if order == -2
		# Generate wavelength grid in increasing wavelength order
		#(lo,hi) = lamA2lohi(fuv_lambdaA)
		# Reverse to decreasing order as fuv_lambdaA is in decreasing order
		# reverse!(lo)
		# reverse!(hi)
		netsrc_spec_counts_per_s_A = netsrc_spec_counts_per_s ./ 2.789558814560311
		return fuv_lambdaA, netsrc_spec_counts_per_s_A
    elseif order == -1
		netsrc_spec_counts_per_s_A = netsrc_spec_counts_per_s ./ 5.5690588440719395
		return fuv_lambdaA, netsrc_spec_counts_per_s_A
    else
		println("Grating order $order not calibrated.")
		return -1
    end

end

gauss1d(x)  = ampl * exp(-4 * log(2) * (x - pos)^2 / fwhm^2)

"""
    `fuv_grating1_ea(lamA[,order = -2])`

Calculate effective area in cm^2 at a desired wavelength (Angstrom) and grating order -1 or -2.

The calculation of the effective area is based on the grating calibration peformed in [Dewangan (2021)](https://ui.adsabs.harvard.edu/abs/2021JApA...42...49D/abstract). 
This function is used for flux calibration of count spectrum.

...
# Arguments
## Required
- `lam::Number`: Wavelength in Angstrom.
## Optional 
-`order::Int`: Grating order -1 or -2.
...
"""
function fuv_grating1_ea(lam; order = -2)
   	l = convert.(Float64, lam)
   	if order == -2
#=		October 2019 calibration
		(c0,c1,c2,c3,c4,c5,c6)=(33169.694346474265,-129.6774612550983,0.20905221622625014,-0.00017795872570803257,8.441653497632216e-08,-2.1168582717601436e-11, 2.1933236635326414e-15)
 		ea = c0 + c1 * l + c2 * l^2 + c3 * l^3 + c4 * l^4 + c5 *l^5 + c6 * l^6
=#

# Feb 2021 Calibration
#=
	ea_lamA = [1194.5, 1195.0, 1195.5, 1196.0, 1196.5, 1197.0, 1197.5, 1198.0, 1198.5, 1199.0, 1199.5, 1200.0, 1200.5, 1201.0, 1201.5, 1202.0, 1202.5, 1203.0, 1203.5, 1204.0, 1204.5, 1205.0, 1205.5, 1206.0, 1206.5, 1207.0, 1207.5, 1208.0, 1208.5, 1209.0, 1209.5, 1210.0, 1210.5, 1211.0, 1211.5, 1212.0, 1212.5, 1213.0, 1213.5, 1214.0, 1214.5, 1215.0, 1215.5, 1216.0, 1216.5, 1217.0, 1217.5, 1218.0, 1218.5, 1219.0, 1219.5, 1220.0, 1220.5, 1221.0, 1221.5, 1222.0, 1222.5, 1223.0, 1223.5, 1224.0, 1224.5, 1225.0, 1225.5, 1226.0, 1226.5, 1227.0, 1227.5, 1228.0, 1228.5, 1229.0, 1229.5, 1230.0, 1230.5, 1231.0, 1231.5, 1232.0, 1232.5, 1233.0, 1233.5, 1234.0, 1234.5, 1235.0, 1235.5, 1236.0, 1236.5, 1237.0, 1237.5, 1238.0, 1238.5, 1239.0, 1239.5, 1240.0, 1240.5, 1241.0, 1241.5, 1242.0, 1242.5, 1243.0, 1243.5, 1244.0, 1244.5, 1245.0, 1245.5, 1246.0, 1246.5, 1247.0, 1247.5, 1248.0, 1248.5, 1249.0, 1249.5, 1250.0, 1250.5, 1251.0, 1251.5, 1252.0, 1252.5, 1253.0, 1253.5, 1254.0, 1254.5, 1255.0, 1255.5, 1256.0, 1256.5, 1257.0, 1257.5, 1258.0, 1258.5, 1259.0, 1259.5, 1260.0, 1260.5, 1261.0, 1261.5, 1262.0, 1262.5, 1263.0, 1263.5, 1264.0, 1264.5, 1265.0, 1265.5, 1266.0, 1266.5, 1267.0, 1267.5, 1268.0, 1268.5, 1269.0, 1269.5, 1270.0, 1270.5, 1271.0, 1271.5, 1272.0, 1272.5, 1273.0, 1273.5, 1274.0, 1274.5, 1275.0, 1275.5, 1276.0, 1276.5, 1277.0, 1277.5, 1278.0, 1278.5, 1279.0, 1279.5, 1280.0, 1280.5, 1281.0, 1281.5, 1282.0, 1282.5, 1283.0, 1283.5, 1284.0, 1284.5, 1285.0, 1285.5, 1286.0, 1286.5, 1287.0, 1287.5, 1288.0, 1288.5, 1289.0, 1289.5, 1290.0, 1290.5, 1291.0, 1291.5, 1292.0, 1292.5, 1293.0, 1293.5, 1294.0, 1294.5, 1295.0, 1295.5, 1296.0, 1296.5, 1297.0, 1297.5, 1298.0, 1298.5, 1299.0, 1299.5, 1300.0, 1300.5, 1301.0, 1301.5, 1302.0, 1302.5, 1303.0, 1303.5, 1304.0, 1304.5, 1305.0, 1305.5, 1306.0, 1306.5, 1307.0, 1307.5, 1308.0, 1308.5, 1309.0, 1309.5, 1310.0, 1310.5, 1311.0, 1311.5, 1312.0, 1312.5, 1313.0, 1313.5, 1314.0, 1314.5, 1315.0, 1315.5, 1316.0, 1316.5, 1317.0, 1317.5, 1318.0, 1318.5, 1319.0, 1319.5, 1320.0, 1320.5, 1321.0, 1321.5, 1322.0, 1322.5, 1323.0, 1323.5, 1324.0, 1324.5, 1325.0, 1325.5, 1326.0, 1326.5, 1327.0, 1327.5, 1328.0, 1328.5, 1329.0, 1329.5, 1330.0, 1330.5, 1331.0, 1331.5, 1332.0, 1332.5, 1333.0, 1333.5, 1334.0, 1334.5, 1335.0, 1335.5, 1336.0, 1336.5, 1337.0, 1337.5, 1338.0, 1338.5, 1339.0, 1339.5, 1340.0, 1340.5, 1341.0, 1341.5, 1342.0, 1342.5, 1343.0, 1343.5, 1344.0, 1344.5, 1345.0, 1345.5, 1346.0, 1346.5, 1347.0, 1347.5, 1348.0, 1348.5, 1349.0, 1349.5, 1350.0, 1350.5, 1351.0, 1351.5, 1352.0, 1352.5, 1353.0, 1353.5, 1354.0, 1354.5, 1355.0, 1355.5, 1356.0, 1356.5, 1357.0, 1357.5, 1358.0, 1358.5, 1359.0, 1359.5, 1360.0, 1360.5, 1361.0, 1361.5, 1362.0, 1362.5, 1363.0, 1363.5, 1364.0, 1364.5, 1365.0, 1365.5, 1366.0, 1366.5, 1367.0, 1367.5, 1368.0, 1368.5, 1369.0, 1369.5, 1370.0, 1370.5, 1371.0, 1371.5, 1372.0, 1372.5, 1373.0, 1373.5, 1374.0, 1374.5, 1375.0, 1375.5, 1376.0, 1376.5, 1377.0, 1377.5, 1378.0, 1378.5, 1379.0, 1379.5, 1380.0, 1380.5, 1381.0, 1381.5, 1382.0, 1382.5, 1383.0, 1383.5, 1384.0, 1384.5, 1385.0, 1385.5, 1386.0, 1386.5, 1387.0, 1387.5, 1388.0, 1388.5, 1389.0, 1389.5, 1390.0, 1390.5, 1391.0, 1391.5, 1392.0, 1392.5, 1393.0, 1393.5, 1394.0, 1394.5, 1395.0, 1395.5, 1396.0, 1396.5, 1397.0, 1397.5, 1398.0, 1398.5, 1399.0, 1399.5, 1400.0, 1400.5, 1401.0, 1401.5, 1402.0, 1402.5, 1403.0, 1403.5, 1404.0, 1404.5, 1405.0, 1405.5, 1406.0, 1406.5, 1407.0, 1407.5, 1408.0, 1408.5, 1409.0, 1409.5, 1410.0, 1410.5, 1411.0, 1411.5, 1412.0, 1412.5, 1413.0, 1413.5, 1414.0, 1414.5, 1415.0, 1415.5, 1416.0, 1416.5, 1417.0, 1417.5, 1418.0, 1418.5, 1419.0, 1419.5, 1420.0, 1420.5, 1421.0, 1421.5, 1422.0, 1422.5, 1423.0, 1423.5, 1424.0, 1424.5, 1425.0, 1425.5, 1426.0, 1426.5, 1427.0, 1427.5, 1428.0, 1428.5, 1429.0, 1429.5, 1430.0, 1430.5, 1431.0, 1431.5, 1432.0, 1432.5, 1433.0, 1433.5, 1434.0, 1434.5, 1435.0, 1435.5, 1436.0, 1436.5, 1437.0, 1437.5, 1438.0, 1438.5, 1439.0, 1439.5, 1440.0, 1440.5, 1441.0, 1441.5, 1442.0, 1442.5, 1443.0, 1443.5, 1444.0, 1444.5, 1445.0, 1445.5, 1446.0, 1446.5, 1447.0, 1447.5, 1448.0, 1448.5, 1449.0, 1449.5, 1450.0, 1450.5, 1451.0, 1451.5, 1452.0, 1452.5, 1453.0, 1453.5, 1454.0, 1454.5, 1455.0, 1455.5, 1456.0, 1456.5, 1457.0, 1457.5, 1458.0, 1458.5, 1459.0, 1459.5, 1460.0, 1460.5, 1461.0, 1461.5, 1462.0, 1462.5, 1463.0, 1463.5, 1464.0, 1464.5, 1465.0, 1465.5, 1466.0, 1466.5, 1467.0, 1467.5, 1468.0, 1468.5, 1469.0, 1469.5, 1470.0, 1470.5, 1471.0, 1471.5, 1472.0, 1472.5, 1473.0, 1473.5, 1474.0, 1474.5, 1475.0, 1475.5, 1476.0, 1476.5, 1477.0, 1477.5, 1478.0, 1478.5, 1479.0, 1479.5, 1480.0, 1480.5, 1481.0, 1481.5, 1482.0, 1482.5, 1483.0, 1483.5, 1484.0, 1484.5, 1485.0, 1485.5, 1486.0, 1486.5, 1487.0, 1487.5, 1488.0, 1488.5, 1489.0, 1489.5, 1490.0, 1490.5, 1491.0, 1491.5, 1492.0, 1492.5, 1493.0, 1493.5, 1494.0, 1494.5, 1495.0, 1495.5, 1496.0, 1496.5, 1497.0, 1497.5, 1498.0, 1498.5, 1499.0, 1499.5, 1500.0, 1500.5, 1501.0, 1501.5, 1502.0, 1502.5, 1503.0, 1503.5, 1504.0, 1504.5, 1505.0, 1505.5, 1506.0, 1506.5, 1507.0, 1507.5, 1508.0, 1508.5, 1509.0, 1509.5, 1510.0, 1510.5, 1511.0, 1511.5, 1512.0, 1512.5, 1513.0, 1513.5, 1514.0, 1514.5, 1515.0, 1515.5, 1516.0, 1516.5, 1517.0, 1517.5, 1518.0, 1518.5, 1519.0, 1519.5, 1520.0, 1520.5, 1521.0, 1521.5, 1522.0, 1522.5, 1523.0, 1523.5, 1524.0, 1524.5, 1525.0, 1525.5, 1526.0, 1526.5, 1527.0, 1527.5, 1528.0, 1528.5, 1529.0, 1529.5, 1530.0, 1530.5, 1531.0, 1531.5, 1532.0, 1532.5, 1533.0, 1533.5, 1534.0, 1534.5, 1535.0, 1535.5, 1536.0, 1536.5, 1537.0, 1537.5, 1538.0, 1538.5, 1539.0, 1539.5, 1540.0, 1540.5, 1541.0, 1541.5, 1542.0, 1542.5, 1543.0, 1543.5, 1544.0, 1544.5, 1545.0, 1545.5, 1546.0, 1546.5, 1547.0, 1547.5, 1548.0, 1548.5, 1549.0, 1549.5, 1550.0, 1550.5, 1551.0, 1551.5, 1552.0, 1552.5, 1553.0, 1553.5, 1554.0, 1554.5, 1555.0, 1555.5, 1556.0, 1556.5, 1557.0, 1557.5, 1558.0, 1558.5, 1559.0, 1559.5, 1560.0, 1560.5, 1561.0, 1561.5, 1562.0, 1562.5, 1563.0, 1563.5, 1564.0, 1564.5, 1565.0, 1565.5, 1566.0, 1566.5, 1567.0, 1567.5, 1568.0, 1568.5, 1569.0, 1569.5, 1570.0, 1570.5, 1571.0, 1571.5, 1572.0, 1572.5, 1573.0, 1573.5, 1574.0, 1574.5, 1575.0, 1575.5, 1576.0, 1576.5, 1577.0, 1577.5, 1578.0, 1578.5, 1579.0, 1579.5, 1580.0, 1580.5, 1581.0, 1581.5, 1582.0, 1582.5, 1583.0, 1583.5, 1584.0, 1584.5, 1585.0, 1585.5, 1586.0, 1586.5, 1587.0, 1587.5, 1588.0, 1588.5, 1589.0, 1589.5, 1590.0, 1590.5, 1591.0, 1591.5, 1592.0, 1592.5, 1593.0, 1593.5, 1594.0, 1594.5, 1595.0, 1595.5, 1596.0, 1596.5, 1597.0, 1597.5, 1598.0, 1598.5, 1599.0, 1599.5, 1600.0, 1600.5, 1601.0, 1601.5, 1602.0, 1602.5, 1603.0, 1603.5, 1604.0, 1604.5, 1605.0, 1605.5, 1606.0, 1606.5, 1607.0, 1607.5, 1608.0, 1608.5, 1609.0, 1609.5, 1610.0, 1610.5, 1611.0, 1611.5, 1612.0, 1612.5, 1613.0, 1613.5, 1614.0, 1614.5, 1615.0, 1615.5, 1616.0, 1616.5, 1617.0, 1617.5, 1618.0, 1618.5, 1619.0, 1619.5, 1620.0, 1620.5, 1621.0, 1621.5, 1622.0, 1622.5, 1623.0, 1623.5, 1624.0, 1624.5, 1625.0, 1625.5, 1626.0, 1626.5, 1627.0, 1627.5, 1628.0, 1628.5, 1629.0, 1629.5, 1630.0, 1630.5, 1631.0, 1631.5, 1632.0, 1632.5, 1633.0, 1633.5, 1634.0, 1634.5, 1635.0, 1635.5, 1636.0, 1636.5, 1637.0, 1637.5, 1638.0, 1638.5, 1639.0, 1639.5, 1640.0, 1640.5, 1641.0, 1641.5, 1642.0, 1642.5, 1643.0, 1643.5, 1644.0, 1644.5, 1645.0, 1645.5, 1646.0, 1646.5, 1647.0, 1647.5, 1648.0, 1648.5, 1649.0, 1649.5, 1650.0, 1650.5, 1651.0, 1651.5, 1652.0, 1652.5, 1653.0, 1653.5, 1654.0, 1654.5, 1655.0, 1655.5, 1656.0, 1656.5, 1657.0, 1657.5, 1658.0, 1658.5, 1659.0, 1659.5, 1660.0, 1660.5, 1661.0, 1661.5, 1662.0, 1662.5, 1663.0, 1663.5, 1664.0, 1664.5, 1665.0, 1665.5, 1666.0, 1666.5, 1667.0, 1667.5, 1668.0, 1668.5, 1669.0, 1669.5, 1670.0, 1670.5, 1671.0, 1671.5, 1672.0, 1672.5, 1673.0, 1673.5, 1674.0, 1674.5, 1675.0, 1675.5, 1676.0, 1676.5, 1677.0, 1677.5, 1678.0, 1678.5, 1679.0, 1679.5, 1680.0, 1680.5, 1681.0, 1681.5, 1682.0, 1682.5, 1683.0, 1683.5, 1684.0, 1684.5, 1685.0, 1685.5, 1686.0, 1686.5, 1687.0, 1687.5, 1688.0, 1688.5, 1689.0, 1689.5, 1690.0, 1690.5, 1691.0, 1691.5, 1692.0, 1692.5, 1693.0, 1693.5, 1694.0, 1694.5, 1695.0, 1695.5, 1696.0, 1696.5, 1697.0, 1697.5, 1698.0, 1698.5, 1699.0, 1699.5, 1700.0, 1700.5, 1701.0, 1701.5, 1702.0, 1702.5, 1703.0, 1703.5, 1704.0, 1704.5, 1705.0, 1705.5, 1706.0, 1706.5, 1707.0, 1707.5, 1708.0, 1708.5, 1709.0, 1709.5, 1710.0, 1710.5, 1711.0, 1711.5, 1712.0, 1712.5, 1713.0, 1713.5, 1714.0, 1714.5, 1715.0, 1715.5, 1716.0, 1716.5, 1717.0, 1717.5, 1718.0, 1718.5, 1719.0, 1719.5, 1720.0, 1720.5, 1721.0, 1721.5, 1722.0, 1722.5, 1723.0, 1723.5, 1724.0, 1724.5, 1725.0, 1725.5, 1726.0, 1726.5, 1727.0, 1727.5, 1728.0, 1728.5, 1729.0, 1729.5, 1730.0, 1730.5, 1731.0, 1731.5, 1732.0, 1732.5, 1733.0, 1733.5, 1734.0, 1734.5, 1735.0, 1735.5, 1736.0, 1736.5, 1737.0, 1737.5, 1738.0, 1738.5, 1739.0, 1739.5, 1740.0, 1740.5, 1741.0, 1741.5, 1742.0, 1742.5, 1743.0, 1743.5, 1744.0, 1744.5, 1745.0, 1745.5, 1746.0, 1746.5, 1747.0, 1747.5, 1748.0, 1748.5, 1749.0, 1749.5, 1750.0, 1750.5, 1751.0, 1751.5, 1752.0, 1752.5, 1753.0, 1753.5, 1754.0, 1754.5, 1755.0, 1755.5, 1756.0, 1756.5, 1757.0, 1757.5, 1758.0, 1758.5, 1759.0, 1759.5, 1760.0, 1760.5, 1761.0, 1761.5, 1762.0, 1762.5, 1763.0, 1763.5, 1764.0, 1764.5, 1765.0, 1765.5, 1766.0, 1766.5, 1767.0, 1767.5, 1768.0, 1768.5, 1769.0, 1769.5, 1770.0, 1770.5, 1771.0, 1771.5, 1772.0, 1772.5, 1773.0, 1773.5, 1774.0, 1774.5, 1775.0, 1775.5, 1776.0, 1776.5, 1777.0, 1777.5, 1778.0, 1778.5, 1779.0, 1779.5, 1780.0, 1780.5, 1781.0, 1781.5, 1782.0, 1782.5, 1783.0, 1783.5, 1784.0, 1784.5, 1785.0, 1785.5, 1786.0, 1786.5, 1787.0, 1787.5, 1788.0, 1788.5, 1789.0, 1789.5, 1790.0, 1790.5, 1791.0, 1791.5, 1792.0, 1792.5, 1793.0, 1793.5, 1794.0, 1794.5, 1795.0, 1795.5, 1796.0, 1796.5, 1797.0, 1797.5, 1798.0, 1798.5, 1799.0, 1799.5, 1800.0, 1800.5, 1801.0]
	ea_cm2 = [0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.7594828456125489, 0.7572039721651607, 0.7557915642724985, 0.7552505587655077, 0.7555844259199131, 0.7567951468402258, 0.7588832523926636, 0.7618479525260455, 0.7656873524308933, 0.7703987197614289, 0.7759787566902611, 0.7824238245886083, 0.7897300658975643, 0.7978933867631244, 0.8069093176382967, 0.8167727962735322, 0.8274779211217267, 0.8390177219332591, 0.8513839876109308, 0.8645671617867792, 0.8785562800159202, 0.8933389113944797, 0.9089010642599247, 0.9252270144974957, 0.9422990320983913, 0.9600970373902156, 0.9785982531622248, 0.9977769255171437, 1.0176041910133735, 1.0380481721932167, 1.059074351504526, 1.0806461993101424, 1.1027259911126812, 1.1252757122062202, 1.1482578973288449, 1.1716362299487058, 1.1953758213546353, 1.219443206848926, 1.2438061449238451, 1.268433324732667, 1.2932940921086187, 1.3183582719422888, 1.3435960869292303, 1.3689781379059531, 1.394475402940269, 1.4200592071205036, 1.4457011186602537, 1.4713727645920032, 1.49704560387331, 1.5226907098270548, 1.548278618256902, 1.573779300608603, 1.5991623076196422, 1.6243970782182982, 1.6494533766487702, 1.6743018088374204, 1.6989143581390524, 1.7232648733677443, 1.7473294604229863, 1.7710867658045986, 1.7945181544609337, 1.8176077884878479, 1.8403426162750651, 1.862712286204689, 1.8847090077708308, 1.9063273894878654, 1.9275642853468071, 1.9484186829764731, 1.9688916643739838, 1.9889864460088176, 2.0087084582591532, 2.028065403952919, 2.047067230299801, 2.065725947111077, 2.0840552444366196, 2.1020699441313364, 2.1197853918826803, 2.137216908542006, 2.1543794166562216, 2.171287352211142, 2.1879549193986536, 2.2043966117645337, 2.2206278510273436, 2.2366655681426195, 2.2525285318561625, 2.2682372480411663, 2.2838133958920075, 2.2992789415241055, 2.3146551122788983, 2.3299614044532886, 2.3452147782290376, 2.3604291500793617, 2.3756151951194355, 2.3907804205843894, 2.4059294686186696, 2.421064609347022, 2.4361863837051856, 2.4512943458976975, 2.466387838884397, 2.481466723727094, 2.4965319736617135, 2.511586037823062, 2.5266329004483596, 2.5416778489277787, 2.556727036117299, 2.5717869379629223, 2.5868638061368494, 2.6019632078862474, 2.6170897121012993, 2.632246717677963, 2.647436396148796, 2.6626597184782606, 2.6779165358639054, 2.693205685477808, 2.708525099263725, 2.7238719015776143, 2.7392424829473905, 2.75463253689602, 2.7700370471485396, 2.7854502187854915, 2.8008653636001117, 2.8162747589000534, 2.831669500607523, 2.847039371822866, 2.8623727484685704, 2.877656564714872, 2.8928763625007665, 2.908016451034591, 2.923060204212382, 2.9379905253456298, 2.952790492388647, 2.967444133812033, 2.981937235128762, 2.9962580568846375, 3.010397833836684, 3.024350931400825, 3.0381146178690526, 3.051688559855721, 3.065074202071197, 3.0782741938098255, 3.091292017828172, 3.1041319425980007, 3.116799289618418, 3.1293008909282363, 3.1416455813195983, 3.1538445596389186, 3.1659114549090934, 3.1778620038296617, 3.1897134134027887, 3.2014835572756377, 3.2131901584367806, 3.224850102036657, 3.2364789973348755, 3.248091018970902, 3.25969895880907, 3.2713143951348647, 3.2829478834455053, 3.2946090726850175, 3.306306674887396, 3.318048291797927, 3.3298401473910424, 3.3416867826457564, 3.353590768589987, 3.3655524898638873, 3.37757003193906, 3.3896391765583225, 3.401753501519465, 3.413904580940398, 3.4260822825679726, 3.438275155891073, 3.450470893215715, 3.46265683596658, 3.4748204949935895, 3.486950051545965, 3.4990348045385935, 3.5110655356145126, 3.5230347778639035, 3.5349369801995767, 3.546768560557052, 3.5585278418669533, 3.5702148685591735, 3.5818311151494693, 3.593379112019137, 3.6048620166093417, 3.6162831580317443, 3.6276455827572507, 3.638951630530992, 3.650202574494723, 3.6613983619225188, 3.6725374926864416, 3.683617073753334, 3.6946330822464244, 3.7055808292092793, 3.7164555593901554, 3.7272531025377136, 3.7379704849511, 3.7486064056832267, 3.759161497248395, 3.769638352106562, 3.7800413397649275, 3.7903762492445794, 3.8006497933385135, 3.8108690135781913, 3.8210406372358596, 3.831170458206857, 3.84126281879811, 3.851320268398089, 3.8613434742670023, 3.8713314389660245, 3.881281989488923, 3.8911924216232907, 3.9010601597579373, 3.9108832830543703, 3.920660769879516, 3.9303923754370143, 3.940078205530137, 3.9497181161019146, 3.9593110746228257, 3.9688546147986057, 3.9783444979345592, 3.9877746253301556, 3.997137170608843, 4.006422883107408, 4.015621512793868, 4.0247223062468445, 4.033714523942889, 4.042587934834913, 4.051333246768136, 4.05994243038039, 4.068408893276535, 4.076727467623623, 4.084894211005834, 4.092906074576576, 4.100760509311467, 4.108455081564951, 4.115987167106735, 4.123353780321472, 4.130551554705974, 4.137576861289789, 4.14442604663071, 4.1510957723090804, 4.157583435465963, 4.163887633033905, 4.17000859881683, 4.175948527414475, 4.181711695637157, 4.187304293613134, 4.192733906454716, 4.198008696056286, 4.203136433000693, 4.208123543959155, 4.212974330825185, 4.217690504732207, 4.222271124193967, 4.226712899520088, 4.231010765308414, 4.235158613940033, 4.239150078827814, 4.242979255801249, 4.246641276629733, 4.250132686701494, 4.253451590767136, 4.256597533710821, 4.259571089968122, 4.262373174053218, 4.265004192145795, 4.267463216377715, 4.269747365048706, 4.271851565769983, 4.273768860571467, 4.275491292069868, 4.2770111940486775, 4.278322621548911, 4.279422623084923, 4.280312036158488, 4.280995547357111, 4.281481032496709, 4.2817784268914325, 4.281898416571418, 4.281851222071955, 4.281645712929334, 4.2812889921379975, 4.280786404315235, 4.280141849310767, 4.279358277620439, 4.278438243283473, 4.277384398308382, 4.276199865329986, 4.274888486545222, 4.273454963343636, 4.271904902615455, 4.270244786359821, 4.268481882488059, 4.266624117511235, 4.264679933153875, 4.262658148858517, 4.260567851784938, 4.258418333097152, 4.256219075006988, 4.253979772518279, 4.251710367664768, 4.249421073661837, 4.247122366854101, 4.244824929902937, 4.242539548243581, 4.240276975216893, 4.238047783583008, 4.235862220892699, 4.233730085003771, 4.231660629530712, 4.229662497050246, 4.227743673459276, 4.225911456515915, 4.224172431764489, 4.222532451200628, 4.220996618751157, 4.219569294915209, 4.2182541347789355, 4.2170541737555185, 4.21597197399352, 4.215009830715868, 4.214170003810344, 4.213454923090728, 4.2128673128025795, 4.212410181014418, 4.212086631091256, 4.211899507807184, 4.21185095810158, 4.211942002753901, 4.2121722135046005, 4.21253958562617, 4.21304066318874, 4.213670874689903, 4.214424973246406, 4.21529746235919, 4.216282884646686, 4.217375861548115, 4.218570850560425, 4.2198617155034475, 4.22124124699956, 4.2227007705732165, 4.22422997491321, 4.2258170587663635, 4.2274491690462765, 4.229112997055951, 4.230795373473269, 4.232483695222974, 4.234166023512865, 4.235830775380123, 4.2374661093988095, 4.2390591792508365, 4.240595431377109, 4.242058114704212, 4.243428143229873, 4.244684348053914, 4.245804045425923, 4.246763820898761, 4.247540425398392, 4.248111675010271, 4.248457262746034, 4.248559450255807, 4.248403642069837, 4.247978851308586, 4.2472780668774, 4.246298529669477, 4.245041907348497, 4.243514331385808, 4.2417262529677355, 4.239692075839303, 4.237429529438803, 4.234958774325206, 4.232301314198306, 4.229478840434032, 4.226512135587297, 4.223420152334877, 4.220219370171271, 4.216923484070579, 4.213543398116179, 4.21008747100613, 4.20656196063181, 4.202971615984565, 4.199320360808898, 4.195611998091166, 4.191850848668928, 4.188042230942482, 4.184192686848369, 4.1803098676312676, 4.1764020541670135, 4.172477423245929, 4.168543229952662, 4.16460507525802, 4.160666418233478, 4.156728464846806, 4.152790453284043, 4.1488502208453095, 4.144904900148053, 4.140951585008127, 4.136987803395749, 4.133011675557886, 4.129021769573133, 4.125016751002924, 4.1209949368191054, 4.11695386108931, 4.112889949102401, 4.108798350943168, 4.104672916380051, 4.100506271357991, 4.096289955210465, 4.092014578414459, 4.08766997052114, 4.083245324404056, 4.078729372519163, 4.074110637188778, 4.069377797953073, 4.0645202157193046, 4.059528618440265, 4.054395875729357, 4.049117753768389, 4.043693532538454, 4.038126364122944, 4.032423271802346, 4.026594786379246, 4.020654317164579, 4.014617377695811, 4.008500782089173, 4.002321918219089, 3.996098172159596, 3.9898465082727053, 3.9835831749088384, 3.977323502420765, 3.9710817616258294, 3.9648710541160375, 3.9587032190162486, 3.9525887584234267, 3.9465367888778875, 3.94055502655432, 3.9346498135246804, 3.9288261875275254, 3.9230879813593464, 3.9174379267075117, 3.9118777352137295, 3.906408129588633, 3.901028801335462, 3.895738295167149, 3.890533861967474, 3.885411336672422, 3.880365098221724, 3.875388167984832, 3.870472489311801, 3.865609372956502, 3.8607900391393906, 3.856006173113472, 3.851250407535479, 3.846516645823442, 3.841800170047606, 3.8370975486888725, 3.8324063938029322, 3.82772502184231, 3.8230520715699323, 3.818386128917554, 3.813725396988918, 3.809067436428157, 3.804408997849562, 3.7997459679481405, 3.79507345021182, 3.7903859880336617, 3.785677897493452, 3.7809436520591335, 3.776178256116168, 3.7713775425896863, 3.766538334993627, 3.7616584507578437, 3.7567365804163635, 3.751772096051895, 3.746764843434736, 3.7417149707717736, 3.7366228368953647, 3.7314890082483223, 3.7263143283709286, 3.721100038830979, 3.7158479305313707, 3.7105605046424697, 3.705241125231458, 3.6998941516149633, 3.694525040843383, 3.6891404109824166, 3.6837480559153546, 3.6783569028389476, 3.672976905241024, 3.667618865879544, 3.662294184999343, 3.657014529492622, 3.651791420608947, 3.6466357510387626, 3.641557274744499, 3.6365641278270897, 3.63166243859997, 3.626856083167686, 3.622146635645279, 3.6175335270715694, 3.6130143800600605, 3.6085854732401326, 3.6042422882849756, 3.59998009090164, 3.5957944962732666, 3.591681971448763, 3.5876402283000144, 3.5836684602885525, 3.5797673767204845, 3.5759389968361317, 3.5721862116731455, 3.568512197460631, 3.5649197880246506, 3.561410911097618, 3.557986187673108, 3.5546447717077037, 3.5513844316450283, 3.548201809856012, 3.545092782539132, 3.5420528409235015, 3.5390774150559614, 3.5361620829356117, 3.5333026610606217, 3.5304951974437775, 3.527735891958299, 3.5250209691686374, 3.522346527522658, 3.519708382520832, 3.517101914253782, 3.5145219277753155, 3.511962534625298, 3.5094170639197535, 3.5068780127975305, 3.504337049965908, 3.5017850885816846, 3.4992124455420175, 3.4966091050025754, 3.4939650989899462, 3.491270983658465, 3.4885183347928512, 3.4857001653711897, 3.4828111631038072, 3.4798476475181417, 3.476807186382262, 3.473687944939172, 3.4704879376339415, 3.4672043620101145, 3.463833185481007, 3.4603691389997655, 3.456806179680026, 3.453138296575232, 3.449360452502708, 3.4454694310654452, 3.441464343230391, 3.4373465860693124, 3.433119244052324, 3.428786121528172, 3.424350634103624, 3.419814771510291, 3.4151783196615098, 3.4104384601956914, 3.405589718908602, 3.400624167281653, 3.395531775002323, 3.390300811067788, 3.3849181981418566, 3.3793697740861033, 3.3736404823385615, 3.367714533010795, 3.3615755785836505, 3.3552069476362667, 3.3485919667015334, 3.3417143560710416, 3.334558655189685, 3.3271106266418715, 3.319357586120767, 3.311288609634396, 3.302894599872585, 3.294168246962755, 3.285103937560235, 3.2756976674419613, 3.2659470113969955, 3.2558511940237125, 3.2454112681637923, 3.234630376269122, 3.2235140634283557, 3.212070610309645, 3.2003113534733374, 3.1882509578052716, 3.1759076007169726, 3.1633030260783492, 3.1504624271984767, 3.137414121654883, 3.1241889980679822, 3.11081977777044, 3.0973401979190274, 3.0837842299414215, 3.070185437220256, 3.056576564046731, 3.0429894080311706, 3.0294549286321413, 3.0160034914815257, 3.002665141702076, 2.9894697998614648, 2.9764472843575707, 2.96362711947983, 2.951038168830063, 2.938708157462211, 2.926663144957468, 2.914927007084612, 2.903520974067445, 2.8924632519258284, 2.8817687386022777, 2.871448844090799, 2.8615114243071775, 2.851960837647005, 2.8427981223180643, 2.8340212703062093, 2.825625565466507, 2.8176039521940077, 2.809947400568538, 2.802645235086049, 2.795685402239595, 2.789054660636005, 2.782738679505264, 2.7767220320579535, 2.7709880731089624, 2.76551870988617, 2.760294120788931, 2.7552924975296844, 2.7504898868668253, 2.745860207087687, 2.7413755037679612, 2.7370064483832777, 2.732723001285702, 2.728495133070276, 2.7242934888245056, 2.7200898744075013, 2.7158574765367667, 2.7115708453202365, 2.7072057457427765, 2.70273899799753, 2.698148425249771, 2.693413015644986, 2.6885133348367893, 2.6834321035380277, 2.6781548078807367, 2.6726701982885945, 2.666970527926649, 2.6610514187521543, 2.6549113885770574, 2.6485511917167983, 2.6419731427271067, 2.635180581336688, 2.6281776181414656, 2.620969228207291, 2.613561610441223, 2.605962666629804, 2.5981824419881496, 2.590233364191681, 2.582130143653116, 2.573889324731057, 2.565528614160535, 2.5570661401379944, 2.5485197845835668, 2.539906714694957, 2.531243192524028, 2.522544631247925, 2.513825810284002, 2.505101154473368, 2.4963849820173722, 2.487691632218607, 2.4790354264184518, 2.4704304778871458, 2.461890386022346, 2.453427851352454, 2.445054246726267, 2.436779180931575, 2.4286100981797767, 2.420551961001899, 2.4126070631554484, 2.404775018667657, 2.397052969369634, 2.3894360178622294, 2.3819178207779124, 2.374491246575994, 2.3671489928677527, 2.3598840521944187, 2.3526899325287243, 2.3455606279619885, 2.3384904220447162, 2.3314736253143566, 2.3245043460517554, 2.3175763858928606, 2.310683317731468, 2.3038187251223423, 2.296976545582006, 2.2901514544844233, 2.2833392242345907, 2.2765369963611843, 2.2697434296396746, 2.262958721243659, 2.2561845084303362, 2.2494236601020448, 2.24267996911838, 2.2359577632679986, 2.22926147194766, 2.2225951955028562, 2.215962323028657, 2.2093652416129257, 2.2028051744829193, 2.1962821619516046, 2.189795162073926, 2.183342236582196, 2.1769207871075773, 2.170527806510747, 2.1641601118192346, 2.1578145336482795, 2.1514880441761473, 2.1451778074463936, 2.138881136426211, 2.1325953453169015, 2.12631750924536, 2.1200441906713694, 2.1137712089536618, 2.1074935287805436, 2.1012053418311374, 2.0949004008389456, 2.0885725871015834, 2.0822166022350483, 2.0758286441453184, 2.069406914346614, 2.062951802772561, 2.056465659177354, 2.0499522283545866, 2.0434159127177787, 2.0368610263065556, 2.030291186660751, 2.023708964114135, 2.01711583226331, 2.0105123677555277, 2.0038986236543384, 1.9972745999517048, 1.990640732711689, 1.9839983279281428, 1.9773498932035942, 1.9706993412776432, 1.9640520445959677, 1.9574147226102807, 1.9507951506323153, 1.9442017067702142, 1.937642818159913, 1.9311263795342326, 1.9246592119779748, 1.9182466227615136, 1.9118921143455179, 1.9055972560145409, 1.8993617028951837, 1.8931833433612388, 1.8870585578951484, 1.8809825731449816, 1.8749498894891783, 1.8689547455386293, 1.8629915740336012, 1.8570553997880472, 1.8511421281672236, 1.8452486803465113, 1.8393729746096807, 1.8335138053765823, 1.8276706851536093, 1.8218437135953023, 1.8160335342381617, 1.8102414192329435, 1.8044694647844628, 1.7987208448372596, 1.7930000637571442, 1.7873131471039068, 1.7816677134294117, 1.7760728993216208, 1.7705391570271856, 1.7650779597341166, 1.7597014502116353, 1.754422066782682, 1.7492521785938635, 1.7442037607866205, 1.7392881389512547, 1.734515831175712, 1.729896515978472, 1.7254391512252456, 1.7211522367993524, 1.717044141928584, 1.713123384650245, 1.709398743225978, 1.7058790816673761, 1.7025728116051888, 1.6994870527494201, 1.696626679121926, 1.6939934420305502, 1.6915853325223955, 1.6893963242085739, 1.6874165819012905, 1.6856330780575424, 1.6840304823659538, 1.6825921640686263, 1.6813011162549003, 1.6801405995415426, 1.6790944035976763, 1.6781467966128252, 1.6772822944961094, 1.6764853883746729, 1.6757403634087578, 1.6750313096958256, 1.6743423302196014, 1.6736578855679791, 1.672963201276772, 1.6722446581938974, 1.6714900848915242, 1.670688899760155, 1.6698321097267013, 1.6689121966078002, 1.6679229259717887, 1.6668591135823327, 1.6657163814895142, 1.6644909254722642, 1.6631793063869547, 1.661778275794649, 1.6602846460260008, 1.65869521443045, 1.6570067481753692, 1.655216027946191, 1.6533199454252807, 1.6513156491972227, 1.6492007338118824, 1.6469734644610874, 1.6446330183721891, 1.642179709832253, 1.6396151608144032, 1.6369423780612349, 1.6341656994202995, 1.63129059096354, 1.628323327124091, 1.625270614385191, 1.6221392204660705, 1.6189356668765071, 1.615666034536119, 1.6123359016027536, 1.60895038793051, 1.6055142672495903, 1.602032107245224, 1.5985083973914367, 1.5949476283267925, 1.5913543031658897, 1.5877328747558284, 1.584087606299607, 1.580422353802629, 1.5767402724272057, 1.5730434680807805, 1.569332651535491, 1.5656068631483637, 1.5618633342797712, 1.5580975508982262, 1.5543035731664576, 1.5504745981768564, 1.5466036773479783, 1.54268447155973, 1.5387119095718647, 1.5346826052573965, 1.5305949333597457, 1.5264487976120378, 1.5222451988072656, 1.517985718717939, 1.5136720269394357, 1.5093054994103836, 1.5048869888677738, 1.5004167314822436, 1.4958943609654611, 1.4913190027640761, 1.486689422256955, 1.4820042040982642, 1.477261949466508, 1.4724614843957817, 1.4676020733470552, 1.4626836319852765, 1.4577069325928629, 1.4526737932546432, 1.4475872380638608, 1.4424516141318462, 1.4372726511387497, 1.4320574497456677, 1.4268143885872502, 1.4215529504947375, 1.416283478024781, 1.4110168704711374, 1.4057642344341035, 1.400536500063696, 1.3953440183643355, 1.390196162611492, 1.385100958579452, 1.380064766317204, 1.3750920342857418, 1.3701851437280883, 1.3653443519515205, 1.3605678337136593, 1.3558518189375166, 1.3511908266831918, 1.3465779962133289, 1.3420055077192847, 1.3374650568519026, 1.3329483269930376, 1.3284473950280422, 1.323955001888397, 1.3194646260320926, 1.3149703464408582, 1.3104665536628795, 1.3059475883476221, 1.3014073832573165, 1.2968391773927737, 1.292235355374658, 1.2875874272187642, 1.282886138112161, 1.27812169548534, 1.2732841028554969, 1.268363589879247, 1.2633511179463113, 1.2582389177342166, 1.2530210016607821, 1.247693587247948, 1.2422553639085994, 1.2367075491718895, 1.2310537410539641, 1.2252996329897572, 1.2194526693780603, 1.213521714660964, 1.207516799313818, 1.2014489754861, 1.195330249087667, 1.1891735249554993, 1.1829925001282602, 1.176801444415699, 1.1706148247196992, 1.1644467909450016, 1.1583106092982047, 1.1522181352485856, 1.1461794048556588, 1.1402024114716907, 1.1342931103701277, 1.1284556283698055, 1.1226926156249764, 1.117005669815733, 1.111395758501221, 1.1058635636956653, 1.10040969916368, 1.095034804412187, 1.0897395406476047, 1.0845245174101745, 1.0793901786543618, 1.0743366746323875, 1.0693637389458603, 1.0644705842402573, 1.059655828354181, 1.054917462358829, 1.0502528707148657, 1.04565890465035, 1.0411319892816715, 1.0366682358682862, 1.0322635291926237, 1.0279135601570923, 1.023613780732897, 1.019359289177832, 1.0151446865227782, 1.0109639516109246, 1.0068103799769588, 1.0026766291363074, 0.9985548954036643, 0.9944371963492807, 0.9903157020976487, 0.9861830498697244, 0.9820325711905613, 0.9778583671508693, 0.9736552168551029, 0.969418377541364, 0.9651433550801992, 0.960825719847829, 0.9564610366899023, 0.9520449570850041, 0.9475734566071741, 0.9430431518406553, 0.9384516179464015, 0.9337976221031751, 0.9290811910277739, 0.9243034764665632, 0.9194664697581867, 0.9145726471855822, 0.9096246236900879, 0.9046248826529255, 0.8995756319650284, 0.8944787906719067, 0.8893360704556995, 0.884149109142345, 0.8789196136285072, 0.8736494706761314, 0.8683407983251162, 0.8629959472295249, 0.8576174790766692, 0.852208151023096, 0.8467709340798949, 0.841309087222992, 0.8358262801275593, 0.8303267203785853, 0.8248152303255021, 0.819297219040036, 0.8137785015939573, 0.8082649509219701, 0.8027620464691633, 0.7972744202435307, 0.7918054901119197, 0.786357255265192, 0.7809303160608736, 0.7755241360917192, 0.7701374879738812, 0.7647689945738898, 0.7594176616716974, 0.7540832810341701, 0.7487665959883703, 0.7434692181803971, 0.7381933721540844, 0.7329415611941754, 0.727716238885991, 0.722519555578471, 0.7173532179231865, 0.7122184502985988, 0.7071160299669634, 0.7020463682828607, 0.6970096115283387, 0.6920057369626408, 0.6870346280221037, 0.6820961219744773, 0.6771900259175233, 0.6723160975377073, 0.6674739880951422, 0.6626631505951559, 0.657882729513318, 0.6531314545333295, 0.6484075600543855, 0.6437087507665513, 0.6390322305462199, 0.6343747983376096, 0.6297329952804904, 0.6251032815136934, 0.6204822200115128, 0.6158666439532796, 0.6112537878031364, 0.606641378105676, 0.6020276921001637, 0.5974115948168199, 0.5927925654444127, 0.5881707229279117, 0.5835468557035709, 0.5789224512320794, 0.5742997176154029, 0.5696815894035665, 0.5650717100294609, 0.5604743844571646, 0.5558944989874595, 0.5513374083336869, 0.5468087911623003, 0.5423144757717973, 0.5378602387022374, 0.5334515852179802, 0.5290935337399285, 0.5247904296008281, 0.5205458107508032, 0.5163623458544924, 0.5122418610978209, 0.5081854528299603, 0.5041936587910946, 0.5002666533545348, 0.49640442944335966, 0.4926069279698767, 0.4888740866209049, 0.485205817797145, 0.48160194950118596, 0.4780621657668144, 0.4745859812613794, 0.47117278022836834, 0.4678219297275597, 0.46453294384408317, 0.4613056629881976, 0.4581404083952295, 0.4550380696135612, 0.4520000923801733, 0.44902837354912095, 0.4461251011355579, 0.4432925813020631, 0.4405330898137781, 0.4378487794093954, 0.4352416570038318, 0.43271361191041613, 0.4302664634534255, 0.4279019946769926, 0.4256219387737842, 0.4234278915042037, 0.42132114990620967, 0.4193025044540468, 0.4173720156617565, 0.4155288021466577, 0.4137708626316407, 0.4120949482194744, 0.41049649182146697, 0.40896959830816315, 0.407507100752563, 0.40610069154284845, 0.40474113913512666, 0.4034185911674237, 0.4021229434712846, 0.40084424028538507, 0.3995730567922955, 0.3983008003613819, 0.39701987197011407, 0.3957236848957604, 0.39440658607111045, 0.3930637381476967, 0.391691019866927, 0.3902849964685051, 0.3888429856504829, 0.38736319665444086, 0.3858448999404363, 0.38428857730311644, 0.38269599619470723, 0.38107015856343984, 0.37941511479499157, 0.3777356729067522, 0.3760370424217185, 0.3743244492457212, 0.372602751022845, 0.3708760714846012, 0.36914745802989274]
	spl_ea = fit(SmoothingSpline, ea_lamA, ea_cm2, 1.0)
	ea = SmoothingSplines.predict(spl_ea, l)
=#



# Read effective area based on WD0308_crreject data (Updated calibration in 2023)

f = FITS("./caldata/fuv_grating1m2_effarea_9nov22.fits")
ea_lamA = read(f[2], "X")
ea_cm2 = read(f[2],"MODEL")


	spl_ea = fit(SmoothingSpline, ea_lamA, ea_cm2, 1.0)
	ea = SmoothingSplines.predict(spl_ea, l)

	elseif order == -1
 		ea = 80994.70349982391  -311.9002643696168 * lam + 0.4993291773681191 * lam^2 -0.0004254619477234513 * lam^3 + 2.035223255254435e-07 * lam^4  -5.1823439777191215e-11 * lam^5 + 5.4873737910814825e-15 * lam^6
	else
    println("Grating order $order not calibrated.")
   	end
 		return ea
end


"""
   `fuv_grating1_flux_calib(lamA, netsrc_spec_counts_per_s_A[,order=-2])`

Flux calibrate the wavelength-calibrated count spectrum from FUV-Grating1.

This function calculates the effective area at each wavelength of the count spectrum, 
then uses the effective areas to convert net count rates to f_λ in CGS units.

...
# Arguments
## Required
-`lamA::Array{Float64}`: Array of wavelengths in Å.
-`netsrc_spec_counts_per_s_A::Array{Float64}`: Array of background corrected counts/s/Å corresponding to wavelength array.
## Optional
-`Order::Number`: Grating order -2 (default) or -1.

...
"""
function fuv_grating1_flux_calib(fuv_lambdaA, netsrc_spec_counts_per_s_A; order=-2)
	
	# Calculate the effective area from the best-fitting polynomial to the derived effective area
   	fuv_g1_ea_cm2_at_fuv_lambdaA = fuv_grating1_ea.(fuv_lambdaA, order=order)
# Calculate flux density
   	fuv_g1_n_λ = netsrc_spec_counts_per_s_A ./ fuv_g1_ea_cm2_at_fuv_lambdaA
   	fuv_g1_f_λ = fuv_g1_n_λ .* lambdaA2ergs.(fuv_lambdaA)
    return fuv_lambdaA, fuv_g1_f_λ
end

"""
    fuv_grating1_fluxed_spec(target,fuv_grating1_image_file, ds9srcregfile, ds9bgdregfile[,order = -2, cross_disp_width_pixels= 50])

Extract flux calibrated spectrum from AstroSat/UVIT FUV-Grating1 dispersed image generated from CCDLAB processing pipeline.

This is a main function that uses other functions for extraction of source and background spectra, wavelenth 
	and flux calibrations, and outputs fluxed spectrum. For details on grating orders, wavelength and flux calibrations, 
	see [Dewangan (2021)](https://ui.adsabs.harvard.edu/abs/2021JApA...42...49D/abstract).
...
# Arguments
## Required parameters
- `target::String`: Name of the target available in the observed UVIT field.
- `fuv_grating1_image_file::String`: Name of the FUV-Grating1 image file in FITS format generated using CCDLAB.
- `ds9srcregfile::String`: Name of the ds9 region file with source center as the zero order position.
- `ds9bgdregfile::String`: Name of the ds9 region file with  center in a source-free region of the image.
## Optional parameters
- `order::Int`: -2 (default), Grating order to be used to extract the spectrum. Allowed orders=-1 and -2.
- `cross_disp_width_pixels::String`: 50 (default), width in pixels in the cross-dispersion direction.
## Output
- `(λ, f_λ, err_f_λ)`
- Fluxed spectrum saved in an ascii file.
...
"""
function fuv_grating1_fluxed_spec(target::String,fuv_grating1_image_file::String, ds9srcregfile::String, ds9bgdregfile::String; order::Int = -2, cross_disp_width_pixels::Int = 50, angle_xaxis_disp_deg::Float64=0.0)
    (pixels, netsrc_spec_counts_per_s) = fuv_grating1_net_countrate_spec(fuv_grating1_image_file, ds9srcregfile, ds9bgdregfile, order=order, cross_disp_width_pixels = cross_disp_width_pixels, angle_xaxis_disp_deg = angle_xaxis_disp_deg)
   	(fuv_lambdaA, netsrc_spec_counts_per_s_A) = fuv_grating1_wavelength_calib(pixels, netsrc_spec_counts_per_s,order=order)
   	(fuv_lambdaA, f_lambda_with_error) = fuv_grating1_flux_calib(fuv_lambdaA, netsrc_spec_counts_per_s_A,order=order)
   	f_λ = Measurements.value.(f_lambda_with_error)
   	err_f_λ =  Measurements.uncertainty.(f_lambda_with_error)
  #display(plot(fuv_lambdaA,f_λ,yerr=err_f_λ,xlabel=L"Wavelength (\AA)", ylabel=L"f_\lambda (ergs cm^{-2} s^{-1}\AA{^-1})",ms=1, label="FUV Grating1"))
  #create output filename
  println("-----------------------------------")
  println("target=$target")
  fff = FITS(fuv_grating1_image_file)
  uvit_detector = read_key(fff[1], "DETECTOR")[1]
  println("UVIT channel=$uvit_detector")
  uvit_grating = read_key(fff[1], "FILTERID")[1]
  println("Grating=$uvit_grating")
  obsid = read_key(fff[1], "OBS_ID")[1]
  println("OBS_ID=$obsid")
  println("order=$order")
  exposure_time_sec = float(read_key(fff[1], "RDCDTIME")[1])
  println("Exposure time=$exposure_time_sec seconds")
  close(fff)
  println("---------------------------------------")
  if order==-1
      gorder="m1"
  elseif order==-2
      gorder="m2"
  else
      println("Grating order not calibrated")
	end
	# Make the spectrum in wavelength order
	reverse!(fuv_lambdaA)
	reverse!(f_λ)
	reverse!(err_f_λ)

  outfile = target * "_" * obsid * "_" * uvit_detector * "_" * uvit_grating * gorder * "_crossdisp" * string(cross_disp_width_pixels) * "pix_" * "xax_disp_" * string(angle_xaxis_disp_deg) * "deg_spec.dat"
    writedlm(outfile, zip(fuv_lambdaA, f_λ, err_f_λ))
    println("Wrote spectral ascii file: $outfile\n")
    return fuv_lambdaA, f_λ, err_f_λ
end


"""
    fuv_grating1_phafile(target,fuv_grating1_image_file, ds9srcregfile, ds9bgdregfile[,order = -2, cross_disp_width_pixels= 50])

Extract XSPEC/Sherpa compatible source and background PHA spectral files from AstroSat/UVIT FUV-Grating1 dispersed image generated from CCDLAB processing pipeline.

This function extracts source and background count spectra using the zero order positions provided 
in the DS9 region files and converts them into PHA spectral files. For details on grating orders 
and spectral responses, see [Dewangan (2021)](https://ui.adsabs.harvard.edu/abs/2021JApA...42...49D/abstract).

...
# Arguments
## Required parameters
- `target::String`: Name of the target available in the observed UVIT field.
- `fuv_grating1_image_file::String`: Name of the FUV-Grating1 image file in FITS format generated using CCDLAB.
- `ds9srcregfile::String`: Name of the ds9 region file with source center as the zero order position.
- `ds9bgdregfile::String`: Name of the ds9 region file with  center in a source-free region of the image.
## Optional parameters
- `order::Int`: -2 (default), Grating order to be used to extract the spectrum. Allowed orders=-1 and -2.
- `cross_disp_width_pixels::String`: 50 (default), width in pixels in the cross-dispersion direction.
- `respdir::String`: Name of the directory containing the response matrices in the local machine. The response files can be downloaded from the GitHub page.
#read necessary keywords`
## Output
- Source and background PHA files.
- Some relevant information are also printed on the screen.
...
"""
function fuv_grating1_phafile(target::String, fuv_grating1_image_file::String, ds9srcregfile::String, ds9bgdregfile::String; order::Int=-2, cross_disp_width_pixels = 50, angle_xaxis_disp_deg::Float64=0.0, respdir::String = "/soft/astrosat/responses/uvit/")
	#read necessary keywords


  println("-----------------------------------")
  println("target=$target")
  fff = FITS(fuv_grating1_image_file)
  uvit_detector = read_key(fff[1], "DETECTOR")[1]
  println("UVIT channel=$uvit_detector")
  uvit_grating = read_key(fff[1], "FILTERID")[1]
  println("Grating=$uvit_grating")
  obsid = read_key(fff[1], "OBS_ID")[1]
  println("OBS_ID=$obsid")
  println("order=$order")
  exposure_time_sec = float(read_key(fff[1], "RDCDTIME")[1])
  println("Exposure time=$exposure_time_sec seconds")
  close(fff)
  println("---------------------------------------")
  if order==-1
      gorder="m1"
  elseif order==-2
      gorder="m2"
  else
      println("Grating order not calibrated")
  end
  

  srcphafile = target * "_" * obsid * "_" * uvit_detector * "_" * uvit_grating * "_" * gorder * "_"  * "crossdisp" * string(cross_disp_width_pixels) *  "pix_" * "xax_disp_" * string(angle_xaxis_disp_deg) * "deg_src.pha"
  bgdphafile = target * "_" * obsid * "_" * uvit_detector * "_" * uvit_grating * "_" * gorder * "_" * "crossdisp" * string(cross_disp_width_pixels) *  "pix_" * "xax_disp_" * string(angle_xaxis_disp_deg) * "deg_bgd.pha"
	#Extract 1d count spectrum
   	(pixels, src_count_spec) = fuv_grating1_count_spec(fuv_grating1_image_file, ds9srcregfile,  order=order, cross_disp_width_pixels = cross_disp_width_pixels, angle_xaxis_disp_deg=angle_xaxis_disp_deg, rate = false)
   	(pixels_bgd, bgd_count_spec) = fuv_grating1_count_spec(fuv_grating1_image_file,  ds9bgdregfile, order=order, cross_disp_width_pixels = cross_disp_width_pixels, angle_xaxis_disp_deg=angle_xaxis_disp_deg, rate = false)

   	src_count_spec_vals = Measurements.value.(src_count_spec)
   	bgd_count_spec_vals = Measurements.value.(bgd_count_spec)
  # Define spectral channels
   	pha_channels = convert.(Int64, LinearIndices(src_count_spec))
	# Write phafiles

    println("Writing source and background PHA files..")
   	src_pha_file_written = write_uvit_grating_phafile(uvit_detector, uvit_grating, pha_channels, reverse(src_count_spec_vals), exposure_time_sec; phafile = srcphafile)
   	bgd_pha_file_written = write_uvit_grating_phafile(uvit_detector, uvit_grating, pha_channels, reverse(bgd_count_spec_vals), exposure_time_sec; phafile = bgdphafile)

	# Find correct response file
	if  order==-2
			rmffile=respdir * "fuv_grating1_m2_12nov22.rmf"
	elseif  order==-1
			rmffile=respdir * "fuv_grating1_m1_3oct19.rmf"
	else
		print("Detector/Grating not recognised, see http://uvit.iiap.res.in/Instrument")
		print("rmf/arf filenames not updated in the PHA header.")
		rmffile="NONE"
	#	arffile="NONE"
	end
	println("Using $rmffile")
	f=fits_open_file(srcphafile, +1)
	fits_movabs_hdu(f,2)
	fits_update_key(f,"BACKFILE",bgdphafile,"Background pha file")
	fits_update_key(f,"RESPFILE",rmffile,"Response matrix with effective area")
	fits_close_file(f)

		return src_pha_file_written, bgd_pha_file_written
end
